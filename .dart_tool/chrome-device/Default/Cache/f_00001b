define(['dart_sdk', 'packages/uuid/uuid_util.dart', 'packages/crypto/src/sha1.dart'], (function load__packages__uuid__uuid_dart(dart_sdk, packages__uuid__uuid_util$46dart, packages__crypto__src__sha1$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const uuid_util = packages__uuid__uuid_util$46dart.uuid_util;
  const sha1 = packages__crypto__src__sha1$46dart.src__sha1;
  var uuid$ = Object.create(dart.library);
  var $toLowerCase = dartx.toLowerCase;
  var $substring = dartx.substring;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $codeUnits = dartx.codeUnits;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $sublist = dartx.sublist;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    MapOfSymbol$dynamic: () => (T.MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    VoidTodynamic: () => (T.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    __ToUint8List: () => (T.__ToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [], {seed: core.int}, {})))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T.ObjectN())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: uuid$.ValidationMode.prototype,
        [_name$]: "ValidationMode.strictRFC4122",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: uuid$.ValidationMode.prototype,
        [_name$]: "ValidationMode.nonStrict",
        index: 0
      });
    },
    get C2() {
      return C[2] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C3() {
      return C[3] = dart.constMap(core.Symbol, dart.dynamic, []);
    },
    get C4() {
      return C[4] = dart.fn(uuid_util.UuidUtil.mathRNG, T.__ToUint8List());
    },
    get C5() {
      return C[5] = dart.constList([C[1] || CT.C1, C[0] || CT.C0], uuid$.ValidationMode);
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = ["package:uuid/uuid.dart"];
  var options$ = dart.privateName(uuid$, "Uuid.options");
  var _name$ = dart.privateName(uuid$, "_name");
  var _initV1 = dart.privateName(uuid$, "_initV1");
  var _initV4 = dart.privateName(uuid$, "_initV4");
  uuid$.Uuid = class Uuid extends core.Object {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    static isValidUUID(opts) {
      let fromString = opts && 'fromString' in opts ? opts.fromString : "";
      let fromByteList = opts && 'fromByteList' in opts ? opts.fromByteList : null;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (fromByteList != null) {
        fromString = uuid$.Uuid.unparse(fromByteList);
      }
      if (fromString === uuid$.Uuid.NAMESPACE_NIL) {
        return true;
      }
      if (fromString.length !== 36) {
        return false;
      }
      switch (validationMode) {
        case C[0] || CT.C0:
        {
          {
            let pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$";
            let regex = core.RegExp.new(pattern, {caseSensitive: false, multiLine: true});
            let match = regex.hasMatch(fromString);
            return match;
          }
        }
        case C[1] || CT.C1:
        {
          {
            let pattern = "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$";
            let regex = core.RegExp.new(pattern, {caseSensitive: false, multiLine: true});
            let match = regex.hasMatch(fromString);
            return match;
          }
        }
        default:
        {
          {
            dart.throw(core.Exception.new("`" + dart.str(validationMode) + "` is an invalid ValidationMode."));
          }
        }
      }
    }
    static isValidOrThrow(opts) {
      let fromString = opts && 'fromString' in opts ? opts.fromString : "";
      let fromByteList = opts && 'fromByteList' in opts ? opts.fromByteList : null;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      let isValid = uuid$.Uuid.isValidUUID({fromString: fromString, fromByteList: fromByteList, validationMode: validationMode});
      if (!isValid) {
        if (validationMode !== uuid$.ValidationMode.nonStrict) {
          let isValidNonStrict = uuid$.Uuid.isValidUUID({fromString: fromString, fromByteList: fromByteList, validationMode: uuid$.ValidationMode.nonStrict});
          if (isValidNonStrict) {
            dart.throw(new core.FormatException.new("The provided UUID is not RFC4122 compliant. It seems you might be using a Microsoft GUID. Try setting `validationMode = ValidationMode.nonStrict`", fromString));
          }
        }
        dart.throw(new core.FormatException.new("The provided UUID is invalid.", fromString));
      }
    }
    static parse(uuid, opts) {
      let t0, t0$;
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      let validate = opts && 'validate' in opts ? opts.validate : true;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      if (validate) {
        uuid$.Uuid.isValidOrThrow({fromString: uuid, validationMode: validationMode});
      }
      let i = offset;
      let ii = 0;
      buffer = buffer != null ? buffer : _native_typed_data.NativeUint8List.new(16);
      let regex = core.RegExp.new("[0-9a-f]{2}");
      for (let match of regex.allMatches(uuid[$toLowerCase]())) {
        if (ii < 16) {
          let hex = uuid[$toLowerCase]()[$substring](match.start, match.end);
          buffer[$_set](i + (t0 = ii, ii = t0 + 1, t0), core.int.parse(hex, {radix: 16}));
        }
      }
      while (ii < 16) {
        buffer[$_set](i + (t0$ = ii, ii = t0$ + 1, t0$), 0);
      }
      return buffer;
    }
    static parseAsByteList(uuid, opts) {
      let buffer = opts && 'buffer' in opts ? opts.buffer : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      let validate = opts && 'validate' in opts ? opts.validate : true;
      let validationMode = opts && 'validationMode' in opts ? opts.validationMode : C[0] || CT.C0;
      return _native_typed_data.NativeUint8List.fromList(uuid$.Uuid.parse(uuid, {buffer: buffer, offset: offset, validate: validate, validationMode: validationMode}));
    }
    static unparse(buffer, opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      if (buffer[$length] !== 16) {
        dart.throw(core.Exception.new("The provided buffer needs to have a length of 16."));
      }
      let i = offset;
      return uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0 = i, i = t0 + 1, t0))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$ = i, i = t0$ + 1, t0$))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$0 = i, i = t0$0 + 1, t0$0))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$1 = i, i = t0$1 + 1, t0$1))) + "-" + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$2 = i, i = t0$2 + 1, t0$2))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$3 = i, i = t0$3 + 1, t0$3))) + "-" + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$4 = i, i = t0$4 + 1, t0$4))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$5 = i, i = t0$5 + 1, t0$5))) + "-" + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$6 = i, i = t0$6 + 1, t0$6))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$7 = i, i = t0$7 + 1, t0$7))) + "-" + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$8 = i, i = t0$8 + 1, t0$8))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$9 = i, i = t0$9 + 1, t0$9))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$10 = i, i = t0$10 + 1, t0$10))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$11 = i, i = t0$11 + 1, t0$11))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$12 = i, i = t0$12 + 1, t0$12))) + uuid$.Uuid._byteToHex[$_get](buffer[$_get]((t0$13 = i, i = t0$13 + 1, t0$13)));
    }
    [_initV1](options) {
      let t2, t1, t0, t2$, t1$, t0$, t1$0, t0$0;
      options == null ? options = C[2] || CT.C2 : null;
      if (!core.bool.as(dart.nullCheck(uuid$.Uuid._state[$_get]("hasInitV1")))) {
        let v1PositionalArgs = options[$_get]("v1rngPositionalArgs") != null ? options[$_get]("v1rngPositionalArgs") : [];
        let v1NamedArgs = options[$_get]("v1rngNamedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("v1rngNamedArgs")) : C[3] || CT.C3;
        let seedBytes = typed_data.Uint8List.as(options[$_get]("v1rng") != null ? core.Function.apply(core.Function.as(options[$_get]("v1rng")), T.ListN().as(v1PositionalArgs), v1NamedArgs) : uuid_util.UuidUtil.mathRNG());
        uuid$.Uuid._state[$_get]("seedBytes") != null ? uuid$.Uuid._state[$_get]("seedBytes") : (t0 = uuid$.Uuid._state, t1 = "seedBytes", t2 = seedBytes, t0[$_set](t1, t2), t2);
        let nodeId = T.JSArrayOfint().of([(seedBytes[$_get](0) | 1) >>> 0, seedBytes[$_get](1), seedBytes[$_get](2), seedBytes[$_get](3), seedBytes[$_get](4), seedBytes[$_get](5)]);
        uuid$.Uuid._state[$_get]("node") != null ? uuid$.Uuid._state[$_get]("node") : (t0$ = uuid$.Uuid._state, t1$ = "node", t2$ = nodeId, t0$[$_set](t1$, t2$), t2$);
        let clockSeq = (seedBytes[$_get](6) << 8 | seedBytes[$_get](7)) & 262143;
        t0$0 = uuid$.Uuid._state;
        t1$0 = "clockSeq";
        t0$0[$_get](t1$0) == null ? t0$0[$_set](t1$0, clockSeq) : null;
        uuid$.Uuid._state[$_set]("mSecs", 0);
        uuid$.Uuid._state[$_set]("nSecs", 0);
        uuid$.Uuid._state[$_set]("hasInitV1", true);
      }
    }
    [_initV4](options) {
      options == null ? options = new (T.IdentityMapOfString$dynamic()).new() : null;
      if (!core.bool.as(dart.nullCheck(uuid$.Uuid._state[$_get]("hasInitV4")))) {
        let gPositionalArgs = options[$_get]("grngPositionalArgs") != null ? options[$_get]("grngPositionalArgs") : [];
        let gNamedArgs = options[$_get]("grngNamedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("grngNamedArgs")) : C[3] || CT.C3;
        let grng = options[$_get]("grng");
        uuid$.Uuid._state[$_set]("globalRNG", grng != null ? dart.fn(() => core.Function.apply(core.Function.as(grng), T.ListN().as(gPositionalArgs), gNamedArgs), T.VoidTodynamic()) : C[4] || CT.C4);
        uuid$.Uuid._state[$_set]("hasInitV4", true);
      }
    }
    v1(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let options = opts && 'options' in opts ? opts.options : null;
      let i = 0;
      let buf = _native_typed_data.NativeUint8List.new(16);
      options == null ? options = new (T.IdentityMapOfString$dynamic()).new() : null;
      this[_initV1](options);
      let clockSeq = options[$_get]("clockSeq") != null ? options[$_get]("clockSeq") : core.int.as(uuid$.Uuid._state[$_get]("clockSeq"));
      let mSecs = options[$_get]("mSecs") != null ? options[$_get]("mSecs") : new core.DateTime.now().millisecondsSinceEpoch;
      let nSecs = options[$_get]("nSecs") != null ? options[$_get]("nSecs") : core.int.as(dart.nullCheck(uuid$.Uuid._state[$_get]("nSecs"))) + 1;
      let dt = dart.dsend(dart.dsend(mSecs, '-', [uuid$.Uuid._state[$_get]("mSecs")]), '+', [dart.dsend(dart.dsend(nSecs, '-', [uuid$.Uuid._state[$_get]("nSecs")]), '/', [10000])]);
      if (dart.dtest(dart.dsend(dt, '<', [0])) && options[$_get]("clockSeq") == null) {
        clockSeq = dart.dsend(dart.dsend(clockSeq, '+', [1]), '&', [16383]);
      }
      if ((dart.dtest(dart.dsend(dt, '<', [0])) || dart.dtest(dart.dsend(mSecs, '>', [uuid$.Uuid._state[$_get]("mSecs")]))) && options[$_get]("nSecs") == null) {
        nSecs = 0;
      }
      if (dart.dtest(dart.dsend(nSecs, '>=', [10000]))) {
        dart.throw(core.Exception.new("uuid.v1(): Can't create more than 10M uuids/sec"));
      }
      uuid$.Uuid._state[$_set]("mSecs", mSecs);
      uuid$.Uuid._state[$_set]("nSecs", nSecs);
      uuid$.Uuid._state[$_set]("clockSeq", clockSeq);
      mSecs = dart.dsend(mSecs, '+', [12219292800000]);
      let tl = dart.dsend(dart.dsend(dart.dsend(dart.dsend(mSecs, '&', [268435455]), '*', [10000]), '+', [nSecs]), '%', [4294967296]);
      buf[$_set]((t0 = i, i = t0 + 1, t0), core.int.as(dart.dsend(dart.dsend(tl, '>>', [24]), '&', [255])));
      buf[$_set]((t0$ = i, i = t0$ + 1, t0$), core.int.as(dart.dsend(dart.dsend(tl, '>>', [16]), '&', [255])));
      buf[$_set]((t0$0 = i, i = t0$0 + 1, t0$0), core.int.as(dart.dsend(dart.dsend(tl, '>>', [8]), '&', [255])));
      buf[$_set]((t0$1 = i, i = t0$1 + 1, t0$1), core.int.as(dart.dsend(tl, '&', [255])));
      let tmh = dart.dsend(dart.dsend(dart.dsend(dart.dsend(mSecs, '/', [4294967296]), '*', [10000]), 'floor', []), '&', [268435455]);
      buf[$_set]((t0$2 = i, i = t0$2 + 1, t0$2), core.int.as(dart.dsend(dart.dsend(tmh, '>>', [8]), '&', [255])));
      buf[$_set]((t0$3 = i, i = t0$3 + 1, t0$3), core.int.as(dart.dsend(tmh, '&', [255])));
      buf[$_set]((t0$4 = i, i = t0$4 + 1, t0$4), core.int.as(dart.dsend(dart.dsend(dart.dsend(tmh, '>>', [24]), '&', [15]), '|', [16])));
      buf[$_set]((t0$5 = i, i = t0$5 + 1, t0$5), core.int.as(dart.dsend(dart.dsend(tmh, '>>', [16]), '&', [255])));
      buf[$_set]((t0$6 = i, i = t0$6 + 1, t0$6), core.int.as(dart.dsend(dart.dsend(dart.dsend(clockSeq, '&', [16128]), '>>', [8]), '|', [128])));
      buf[$_set]((t0$7 = i, i = t0$7 + 1, t0$7), core.int.as(dart.dsend(clockSeq, '&', [255])));
      let node = options[$_get]("node") != null ? options[$_get]("node") : uuid$.Uuid._state[$_get]("node");
      for (let n = 0; n < 6; n = n + 1) {
        buf[$_set](i + n, core.int.as(dart.dsend(node, '_get', [n])));
      }
      return uuid$.Uuid.unparse(buf);
    }
    v1buffer(buffer, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      return uuid$.Uuid.parse(this.v1({options: options}), {buffer: buffer, offset: offset});
    }
    v1obj(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v1({options: options});
      return uuid$.UuidValue.new(uuid);
    }
    v4(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      options = options != null ? options : new (T.IdentityMapOfString$dynamic()).new();
      this[_initV4](options);
      let positionalArgs = options[$_get]("positionalArgs") != null ? options[$_get]("positionalArgs") : [];
      let namedArgs = options[$_get]("namedArgs") != null ? T.MapOfSymbol$dynamic().as(options[$_get]("namedArgs")) : C[3] || CT.C3;
      let rng = options[$_get]("rng") != null ? core.Function.apply(core.Function.as(options[$_get]("rng")), T.ListN().as(positionalArgs), namedArgs) : dart.dcall(core.Function.as(dart.nullCheck(uuid$.Uuid._state[$_get]("globalRNG"))), []);
      let rnds = options[$_get]("random") != null ? options[$_get]("random") : rng;
      dart.dsend(rnds, '_set', [6, dart.dsend(dart.dsend(dart.dsend(rnds, '_get', [6]), '&', [15]), '|', [64])]);
      dart.dsend(rnds, '_set', [8, dart.dsend(dart.dsend(dart.dsend(rnds, '_get', [8]), '&', [63]), '|', [128])]);
      return uuid$.Uuid.unparse(T.ListOfint().as(rnds));
    }
    v4buffer(buffer, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      return uuid$.Uuid.parse(this.v4({options: options}), {buffer: buffer, offset: offset});
    }
    v4obj(opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v4({options: options});
      return uuid$.UuidValue.new(uuid);
    }
    v5(namespace, name, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      options = options != null ? options : new (T.IdentityMapOfString$dynamic()).new();
      let useRandom = options[$_get]("randomNamespace") != null ? options[$_get]("randomNamespace") : true;
      let blankNS = dart.dtest(useRandom) ? this.v4() : uuid$.Uuid.NAMESPACE_NIL;
      namespace = namespace != null ? namespace : blankNS;
      name = name != null ? name : "";
      let bytes = uuid$.Uuid.parse(namespace);
      let nameBytes = T.JSArrayOfint().of([]);
      for (let singleChar of name[$codeUnits]) {
        nameBytes[$add](singleChar);
      }
      let hashBytes = sha1.sha1.convert((() => {
        let t0 = T.ListOfint().of(bytes);
        t0[$addAll](nameBytes);
        return t0;
      })()).bytes;
      hashBytes[$_set](6, hashBytes[$_get](6) & 15 | 80);
      hashBytes[$_set](8, hashBytes[$_get](8) & 63 | 128);
      return uuid$.Uuid.unparse(hashBytes[$sublist](0, 16));
    }
    v5buffer(namespace, name, buffer, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let offset = opts && 'offset' in opts ? opts.offset : 0;
      return uuid$.Uuid.parse(this.v5(namespace, name, {options: options}), {buffer: buffer, offset: offset});
    }
    v5obj(namespace, name, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      let uuid = this.v5(namespace, name, {options: options});
      return uuid$.UuidValue.new(uuid);
    }
  };
  (uuid$.Uuid.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    this[options$] = options;
    ;
  }).prototype = uuid$.Uuid.prototype;
  dart.addTypeTests(uuid$.Uuid);
  dart.addTypeCaches(uuid$.Uuid);
  dart.setMethodSignature(uuid$.Uuid, () => ({
    __proto__: dart.getMethods(uuid$.Uuid.__proto__),
    [_initV1]: dart.fnType(dart.void, [dart.nullable(core.Map$(core.String, dart.dynamic))]),
    [_initV4]: dart.fnType(dart.void, [dart.nullable(core.Map$(core.String, dart.dynamic))]),
    v1: dart.fnType(core.String, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v1buffer: dart.fnType(core.List$(core.int), [core.List$(core.int)], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v1obj: dart.fnType(uuid$.UuidValue, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4: dart.fnType(core.String, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4buffer: dart.fnType(core.List$(core.int), [core.List$(core.int)], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v4obj: dart.fnType(uuid$.UuidValue, [], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5: dart.fnType(core.String, [dart.nullable(core.String), dart.nullable(core.String)], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5buffer: dart.fnType(core.List$(core.int), [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.List$(core.int))], {offset: core.int, options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    v5obj: dart.fnType(uuid$.UuidValue, [dart.nullable(core.String), dart.nullable(core.String)], {options: dart.nullable(core.Map$(core.String, dart.dynamic))}, {})
  }));
  dart.setLibraryUri(uuid$.Uuid, I[0]);
  dart.setFieldSignature(uuid$.Uuid, () => ({
    __proto__: dart.getFields(uuid$.Uuid.__proto__),
    options: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineLazy(uuid$.Uuid, {
    /*uuid$.Uuid.NAMESPACE_DNS*/get NAMESPACE_DNS() {
      return "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_URL*/get NAMESPACE_URL() {
      return "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_OID*/get NAMESPACE_OID() {
      return "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_X500*/get NAMESPACE_X500() {
      return "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
    },
    /*uuid$.Uuid.NAMESPACE_NIL*/get NAMESPACE_NIL() {
      return "00000000-0000-0000-0000-000000000000";
    },
    /*uuid$.Uuid._byteToHex*/get _byteToHex() {
      return T.ListOfString().generate(256, dart.fn(i => i[$toRadixString](16)[$padLeft](2, "0"), T.intToString()));
    },
    /*uuid$.Uuid._state*/get _state() {
      return new (T.IdentityMapOfString$ObjectN()).from(["seedBytes", null, "node", null, "clockSeq", null, "mSecs", 0, "nSecs", 0, "hasInitV1", false, "hasInitV4", false]);
    }
  }, false);
  uuid$.ValidationMode = class ValidationMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (uuid$.ValidationMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = uuid$.ValidationMode.prototype;
  dart.addTypeTests(uuid$.ValidationMode);
  dart.addTypeCaches(uuid$.ValidationMode);
  dart.setLibraryUri(uuid$.ValidationMode, I[0]);
  dart.setFieldSignature(uuid$.ValidationMode, () => ({
    __proto__: dart.getFields(uuid$.ValidationMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(uuid$.ValidationMode, ['toString']);
  uuid$.ValidationMode.nonStrict = C[1] || CT.C1;
  uuid$.ValidationMode.strictRFC4122 = C[0] || CT.C0;
  uuid$.ValidationMode.values = C[5] || CT.C5;
  var uuid$0 = dart.privateName(uuid$, "UuidValue.uuid");
  uuid$.UuidValue = class UuidValue extends core.Object {
    get uuid() {
      return this[uuid$0];
    }
    set uuid(value) {
      super.uuid = value;
    }
    static new(uuid, validate = true, validationMode = C[0] || CT.C0) {
      if (validate) {
        uuid$.Uuid.isValidOrThrow({fromString: uuid, validationMode: validationMode});
      }
      return new uuid$.UuidValue.__(uuid[$toLowerCase]());
    }
    static fromByteList(byteList, opts) {
      let t1;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return uuid$.UuidValue.new(uuid$.Uuid.unparse(byteList, {offset: (t1 = offset, t1 == null ? 0 : t1)}));
    }
    static fromList(byteList, opts) {
      let t1;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      return uuid$.UuidValue.new(uuid$.Uuid.unparse(byteList, {offset: (t1 = offset, t1 == null ? 0 : t1)}));
    }
    toBytes() {
      return uuid$.Uuid.parseAsByteList(this.uuid);
    }
    toString() {
      return this.uuid;
    }
    equals(other) {
      return this.uuid === other.uuid;
    }
    _equals(other) {
      if (other == null) return false;
      return uuid$.UuidValue.is(other) && this.uuid === other.uuid;
    }
    get hashCode() {
      return this.uuid[$hashCode];
    }
  };
  (uuid$.UuidValue.__ = function(uuid) {
    this[uuid$0] = uuid;
    ;
  }).prototype = uuid$.UuidValue.prototype;
  dart.addTypeTests(uuid$.UuidValue);
  dart.addTypeCaches(uuid$.UuidValue);
  dart.setMethodSignature(uuid$.UuidValue, () => ({
    __proto__: dart.getMethods(uuid$.UuidValue.__proto__),
    toBytes: dart.fnType(typed_data.Uint8List, []),
    equals: dart.fnType(core.bool, [uuid$.UuidValue])
  }));
  dart.setLibraryUri(uuid$.UuidValue, I[0]);
  dart.setFieldSignature(uuid$.UuidValue, () => ({
    __proto__: dart.getFields(uuid$.UuidValue.__proto__),
    uuid: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(uuid$.UuidValue, ['toString', '_equals']);
  dart.defineExtensionAccessors(uuid$.UuidValue, ['hashCode']);
  dart.trackLibraries("packages/uuid/uuid.dart", {
    "package:uuid/uuid.dart": uuid$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["uuid.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/uuid/uuid.dart.lib.js"}');
  // Exports:
  return {
    uuid: uuid$
  };
}));

//# sourceMappingURL=uuid.dart.lib.js.map
